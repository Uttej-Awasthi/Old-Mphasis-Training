<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="3" total="8" passed="4" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-04-14T11:27:00 IST" name="MyTestingApplication" finished-at="2022-04-14T11:27:00 IST" duration-ms="42">
    <groups>
    </groups>
    <test started-at="2022-04-14T11:27:00 IST" name="MyTest" finished-at="2022-04-14T11:27:00 IST" duration-ms="42">
      <class name="test.TestNgHook">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="beforeSuite" finished-at="2022-04-14T11:27:00 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeTest()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="beforeTest" finished-at="2022-04-14T11:27:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="beforeClass" finished-at="2022-04-14T11:27:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="beforeMethod" finished-at="2022-04-14T11:27:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="beforeMethod" finished-at="2022-04-14T11:27:00 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test2()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="test2" finished-at="2022-04-14T11:27:00 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test2 -->
        <test-method signature="test1()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="test1" finished-at="2022-04-14T11:27:00 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="afterMethod" finished-at="2022-04-14T11:27:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="afterMethod" finished-at="2022-04-14T11:27:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterClass()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="afterClass" finished-at="2022-04-14T11:27:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method is-config="true" signature="afterTest()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="afterTest" finished-at="2022-04-14T11:27:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:test.TestNgHook@10feca44]" started-at="2022-04-14T11:27:00 IST" name="afterSuite" finished-at="2022-04-14T11:27:00 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- test.TestNgHook -->
      <class name="test.ProductServiceTest">
        <test-method signature="findProductTest()[pri:0, instance:test.ProductServiceTest@3d5c822d]" started-at="2022-04-14T11:27:00 IST" name="findProductTest" finished-at="2022-04-14T11:27:00 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- findProductTest -->
        <test-method signature="storeProductTest()[pri:0, instance:test.ProductServiceTest@3d5c822d]" started-at="2022-04-14T11:27:00 IST" name="storeProductTest" finished-at="2022-04-14T11:27:00 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeProductTest -->
      </class> <!-- test.ProductServiceTest -->
      <class name="test.OperationTest">
        <test-method signature="testAdd()[pri:0, instance:test.OperationTest@4bb33f74]" started-at="2022-04-14T11:27:00 IST" name="testAdd" finished-at="2022-04-14T11:27:00 IST" duration-ms="11" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [70] but found [30]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [70] but found [30]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at test.OperationTest.testAdd(OperationTest.java:14)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAdd -->
      </class> <!-- test.OperationTest -->
    </test> <!-- MyTest -->
  </suite> <!-- MyTestingApplication -->
</testng-results>
